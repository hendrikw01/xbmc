diff -r -c FFmpeg-2.4.6-Helix/libavcodec/allcodecs.c ../ffmpeg-2.4.6-Helix/libavcodec/allcodecs.c
*** FFmpeg-2.4.6-Helix/libavcodec/allcodecs.c	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavcodec/allcodecs.c	2016-02-03 00:12:12.788242362 +0100
***************
*** 95,100 ****
--- 95,101 ----
      REGISTER_HWACCEL(WMV3_DXVA2,        wmv3_dxva2);
      REGISTER_HWACCEL(WMV3_VAAPI,        wmv3_vaapi);
      REGISTER_HWACCEL(WMV3_VDPAU,        wmv3_vdpau);
+     REGISTER_HWACCEL(MSMPEG4V3_VDPAU,   msmpeg4v3_vdpau);
  
      /* video codecs */
      REGISTER_ENCODER(A64MULTI,          a64multi);
***************
*** 210,217 ****
--- 211,220 ----
      REGISTER_DECODER(MSA1,              msa1);
      REGISTER_DECODER(MSMPEG4_CRYSTALHD, msmpeg4_crystalhd);
      REGISTER_DECODER(MSMPEG4V1,         msmpeg4v1);
+     REGISTER_DECODER(MSMPEG4V1_VDPAU,   msmpeg4v1_vdpau);
      REGISTER_ENCDEC (MSMPEG4V2,         msmpeg4v2);
      REGISTER_ENCDEC (MSMPEG4V3,         msmpeg4v3);
+     REGISTER_DECODER(MSMPEG4V3_VDPAU,   msmpeg4v3_vdpau);
      REGISTER_DECODER(MSRLE,             msrle);
      REGISTER_DECODER(MSS1,              mss1);
      REGISTER_DECODER(MSS2,              mss2);
diff -r -c FFmpeg-2.4.6-Helix/libavcodec/avcodec.h ../ffmpeg-2.4.6-Helix/libavcodec/avcodec.h
*** FFmpeg-2.4.6-Helix/libavcodec/avcodec.h	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavcodec/avcodec.h	2016-01-31 21:24:16.358444727 +0100
***************
*** 127,132 ****
--- 127,133 ----
      AV_CODEC_ID_MSMPEG4V1,
      AV_CODEC_ID_MSMPEG4V2,
      AV_CODEC_ID_MSMPEG4V3,
+     AV_CODEC_ID_MSMPEG4V4,
      AV_CODEC_ID_WMV1,
      AV_CODEC_ID_WMV2,
      AV_CODEC_ID_H263P,
***************
*** 1479,1487 ****
                              const AVFrame *src, int offset[AV_NUM_DATA_POINTERS],
                              int y, int type, int height);
  
      /**
       * callback to negotiate the pixelFormat
!      * @param fmt is the list of formats which are supported by the codec,
       * it is terminated by -1 as 0 is a valid format, the formats are ordered by quality.
       * The first is always the native one.
       * @return the chosen format
--- 1480,1490 ----
                              const AVFrame *src, int offset[AV_NUM_DATA_POINTERS],
                              int y, int type, int height);
  
+     int (*set_video_header)(struct AVCodecContext *avctx, const uint32_t id);
+ 
      /**
       * callback to negotiate the pixelFormat
!      * @param fmt is the list of formats which are supported by the codec,F
       * it is terminated by -1 as 0 is a valid format, the formats are ordered by quality.
       * The first is always the native one.
       * @return the chosen format
diff -r -c FFmpeg-2.4.6-Helix/libavcodec/h263dec.c ../ffmpeg-2.4.6-Helix/libavcodec/h263dec.c
*** FFmpeg-2.4.6-Helix/libavcodec/h263dec.c	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavcodec/h263dec.c	2016-02-03 01:20:22.946848373 +0100
***************
*** 147,153 ****
  {
      int pos = (get_bits_count(&s->gb) + 7) >> 3;
  
!     if (s->divx_packed || s->avctx->hwaccel) {
          /* We would have to scan through the whole buf to handle the weird
           * reordering ... */
          return buf_size;
--- 147,157 ----
  {
      int pos = (get_bits_count(&s->gb) + 7) >> 3;
  
!     if(s->divx_packed || (s->avctx->hwaccel &&
!          !(s->codec_id == AV_CODEC_ID_MSMPEG4V1 || 
!            s->codec_id == AV_CODEC_ID_MSMPEG4V2 ||
!            s->codec_id == AV_CODEC_ID_MSMPEG4V3 ||
!            s->codec_id == AV_CODEC_ID_MSMPEG4V4))) {
          /* We would have to scan through the whole buf to handle the weird
           * reordering ... */
          return buf_size;
***************
*** 183,189 ****
  
      ff_set_qscale(s, s->qscale);
  
!     if (s->avctx->hwaccel) {
          const uint8_t *start = s->gb.buffer + get_bits_count(&s->gb) / 8;
          ret = s->avctx->hwaccel->decode_slice(s->avctx, start, s->gb.buffer_end - start);
          // ensure we exit decode loop
--- 187,193 ----
  
      ff_set_qscale(s, s->qscale);
  
!     if (s->avctx->hwaccel /* && !s->msmpeg4_version */) {
          const uint8_t *start = s->gb.buffer + get_bits_count(&s->gb) / 8;
          ret = s->avctx->hwaccel->decode_slice(s->avctx, start, s->gb.buffer_end - start);
          // ensure we exit decode loop
***************
*** 583,589 ****
      if (!s->divx_packed && !avctx->hwaccel)
          ff_thread_finish_setup(avctx);
  
!     if (CONFIG_MPEG4_VDPAU_DECODER && (s->avctx->codec->capabilities & CODEC_CAP_HWACCEL_VDPAU)) {
          ff_vdpau_mpeg4_decode_picture(avctx->priv_data, s->gb.buffer, s->gb.buffer_end - s->gb.buffer);
          goto frame_end;
      }
--- 587,594 ----
      if (!s->divx_packed && !avctx->hwaccel)
          ff_thread_finish_setup(avctx);
  
!     if ((CONFIG_MPEG4_VDPAU_DECODER || CONFIG_MSMPEG4V3_VDPAU_DECODER) && 
!           (s->avctx->codec->capabilities & CODEC_CAP_HWACCEL_VDPAU)) {
          ff_vdpau_mpeg4_decode_picture(avctx->priv_data, s->gb.buffer, s->gb.buffer_end - s->gb.buffer);
          goto frame_end;
      }
diff -r -c FFmpeg-2.4.6-Helix/libavcodec/Makefile ../ffmpeg-2.4.6-Helix/libavcodec/Makefile
*** FFmpeg-2.4.6-Helix/libavcodec/Makefile	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavcodec/Makefile	2016-02-01 22:35:05.270144762 +0100
***************
*** 665,670 ****
--- 665,671 ----
  OBJS-$(CONFIG_MPEG2_XVMC_HWACCEL)         += mpegvideo_xvmc.o
  OBJS-$(CONFIG_MPEG4_VAAPI_HWACCEL)        += vaapi_mpeg4.o vaapi_mpeg.o
  OBJS-$(CONFIG_MPEG4_VDPAU_HWACCEL)        += vdpau_mpeg4.o
+ OBJS-$(CONFIG_MSMPEG4V3_VDPAU_HWACCEL)    += vdpau_msmpeg4.o
  OBJS-$(CONFIG_VC1_DXVA2_HWACCEL)          += dxva2_vc1.o
  OBJS-$(CONFIG_VC1_VAAPI_HWACCEL)          += vaapi_vc1.o vaapi_mpeg.o
  OBJS-$(CONFIG_VC1_VDPAU_HWACCEL)          += vdpau_vc1.o
diff -r -c FFmpeg-2.4.6-Helix/libavcodec/mpeg12dec.c ../ffmpeg-2.4.6-Helix/libavcodec/mpeg12dec.c
*** FFmpeg-2.4.6-Helix/libavcodec/mpeg12dec.c	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavcodec/mpeg12dec.c	2016-01-31 21:24:16.368444397 +0100
***************
*** 1188,1194 ****
      AV_PIX_FMT_XVMC,
  #endif
  #if CONFIG_MPEG1_VDPAU_HWACCEL
!     AV_PIX_FMT_VDPAU_MPEG1,
      AV_PIX_FMT_VDPAU,
  #endif
      AV_PIX_FMT_YUV420P,
--- 1188,1194 ----
      AV_PIX_FMT_XVMC,
  #endif
  #if CONFIG_MPEG1_VDPAU_HWACCEL
! //    AV_PIX_FMT_VDPAU_MPEG1,
      AV_PIX_FMT_VDPAU,
  #endif
      AV_PIX_FMT_YUV420P,
***************
*** 1200,1206 ****
      AV_PIX_FMT_XVMC,
  #endif
  #if CONFIG_MPEG2_VDPAU_HWACCEL
!     AV_PIX_FMT_VDPAU_MPEG2,
      AV_PIX_FMT_VDPAU,
  #endif
  #if CONFIG_MPEG2_DXVA2_HWACCEL
--- 1200,1206 ----
      AV_PIX_FMT_XVMC,
  #endif
  #if CONFIG_MPEG2_VDPAU_HWACCEL
! //    AV_PIX_FMT_VDPAU_MPEG2,
      AV_PIX_FMT_VDPAU,
  #endif
  #if CONFIG_MPEG2_DXVA2_HWACCEL
diff -r -c FFmpeg-2.4.6-Helix/libavcodec/mpeg4videodec.c ../ffmpeg-2.4.6-Helix/libavcodec/mpeg4videodec.c
*** FFmpeg-2.4.6-Helix/libavcodec/mpeg4videodec.c	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavcodec/mpeg4videodec.c	2016-01-31 21:24:16.378444068 +0100
***************
*** 32,37 ****
--- 32,38 ----
  #include "h263.h"
  #include "thread.h"
  #include "xvididct.h"
+ #include "vdpau.h"
  
  /* The defines below define the number of bits that are read at once for
   * reading vlc values. Changing these may improve speed and data cache needs
***************
*** 2590,2595 ****
--- 2591,2599 ----
          if (startcode >= 0x120 && startcode <= 0x12F) {
              if (decode_vol_header(ctx, gb) < 0)
                  return -1;
+             if(s->avctx->set_video_header) {
+                s->avctx->set_video_header(s->avctx, VDP_MPEG4_VOL_HEADER);
+             }
          } else if (startcode == USER_DATA_STARTCODE) {
              decode_user_data(ctx, gb);
          } else if (startcode == GOP_STARTCODE) {
***************
*** 2759,2764 ****
--- 2763,2780 ----
      LIBAVUTIL_VERSION_INT,
  };
  
+ const enum AVPixelFormat ff_mpeg4_hwaccel_pixfmt_list_420[] = {
+ #if CONFIG_VAAPI
+    AV_PIX_FMT_VAAPI_VLD,
+ #endif
+ #if CONFIG_VDPAU
+ //   AV_PIX_FMT_VDPAU_MPEG4,
+    AV_PIX_FMT_VDPAU,
+ #endif
+    AV_PIX_FMT_YUV420P,
+    AV_PIX_FMT_NONE
+ };
+ 
  AVCodec ff_mpeg4_decoder = {
      .name                  = "mpeg4",
      .long_name             = NULL_IF_CONFIG_SMALL("MPEG-4 part 2"),
***************
*** 2768,2779 ****
      .init                  = decode_init,
      .close                 = ff_h263_decode_end,
      .decode                = ff_h263_decode_frame,
!     .capabilities          = CODEC_CAP_DRAW_HORIZ_BAND | CODEC_CAP_DR1 |
                               CODEC_CAP_TRUNCATED | CODEC_CAP_DELAY |
                               CODEC_CAP_FRAME_THREADS,
      .flush                 = ff_mpeg_flush,
      .max_lowres            = 3,
!     .pix_fmts              = ff_h263_hwaccel_pixfmt_list_420,
      .profiles              = NULL_IF_CONFIG_SMALL(mpeg4_video_profiles),
      .update_thread_context = ONLY_IF_THREADS_ENABLED(mpeg4_update_thread_context),
      .priv_class = &mpeg4_class,
--- 2784,2795 ----
      .init                  = decode_init,
      .close                 = ff_h263_decode_end,
      .decode                = ff_h263_decode_frame,
!     .capabilities          = /*CODEC_CAP_DRAW_HORIZ_BAND | */CODEC_CAP_DR1 |
                               CODEC_CAP_TRUNCATED | CODEC_CAP_DELAY |
                               CODEC_CAP_FRAME_THREADS,
      .flush                 = ff_mpeg_flush,
      .max_lowres            = 3,
!     .pix_fmts              = ff_mpeg4_hwaccel_pixfmt_list_420,
      .profiles              = NULL_IF_CONFIG_SMALL(mpeg4_video_profiles),
      .update_thread_context = ONLY_IF_THREADS_ENABLED(mpeg4_update_thread_context),
      .priv_class = &mpeg4_class,
***************
*** 2797,2806 ****
      .init           = decode_init,
      .close          = ff_h263_decode_end,
      .decode         = ff_h263_decode_frame,
      .capabilities   = CODEC_CAP_DR1 | CODEC_CAP_TRUNCATED | CODEC_CAP_DELAY |
                        CODEC_CAP_HWACCEL_VDPAU,
!     .pix_fmts       = (const enum AVPixelFormat[]) { AV_PIX_FMT_VDPAU_MPEG4,
                                                    AV_PIX_FMT_NONE },
      .priv_class     = &mpeg4_vdpau_class,
  };
  #endif
--- 2813,2824 ----
      .init           = decode_init,
      .close          = ff_h263_decode_end,
      .decode         = ff_h263_decode_frame,
+     .flush          = ff_mpeg_flush,
      .capabilities   = CODEC_CAP_DR1 | CODEC_CAP_TRUNCATED | CODEC_CAP_DELAY |
                        CODEC_CAP_HWACCEL_VDPAU,
!     .pix_fmts       = (const enum AVPixelFormat[]) { AV_PIX_FMT_VDPAU,
                                                    AV_PIX_FMT_NONE },
+     .profiles       = NULL_IF_CONFIG_SMALL(mpeg4_video_profiles),
      .priv_class     = &mpeg4_vdpau_class,
  };
  #endif
diff -r -c FFmpeg-2.4.6-Helix/libavcodec/msmpeg4dec.c ../ffmpeg-2.4.6-Helix/libavcodec/msmpeg4dec.c
*** FFmpeg-2.4.6-Helix/libavcodec/msmpeg4dec.c	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavcodec/msmpeg4dec.c	2016-02-03 22:01:18.796775625 +0100
***************
*** 911,916 ****
--- 911,928 ----
      return 0;
  }
  
+ const enum AVPixelFormat ff_msmpeg_hwaccel_pixfmt_list_420[] = {
+ #if CONFIG_VAAPI
+     AV_PIX_FMT_VAAPI_VLD,
+ #endif
+ #if CONFIG_VDPAU
+ //    AV_PIX_FMT_VDPAU_MSMPEG4V3,
+     AV_PIX_FMT_VDPAU,
+ #endif
+     AV_PIX_FMT_YUV420P,
+     AV_PIX_FMT_NONE
+ };
+ 
  AVCodec ff_msmpeg4v1_decoder = {
      .name           = "msmpeg4v1",
      .long_name      = NULL_IF_CONFIG_SMALL("MPEG-4 part 2 Microsoft variant version 1"),
***************
*** 920,931 ****
      .init           = ff_msmpeg4_decode_init,
      .close          = ff_h263_decode_end,
      .decode         = ff_h263_decode_frame,
!     .capabilities   = CODEC_CAP_DRAW_HORIZ_BAND | CODEC_CAP_DR1,
      .max_lowres     = 3,
!     .pix_fmts       = (const enum AVPixelFormat[]) {
!         AV_PIX_FMT_YUV420P,
!         AV_PIX_FMT_NONE
!     },
  };
  
  AVCodec ff_msmpeg4v2_decoder = {
--- 932,940 ----
      .init           = ff_msmpeg4_decode_init,
      .close          = ff_h263_decode_end,
      .decode         = ff_h263_decode_frame,
!     .capabilities   = /* CODEC_CAP_DRAW_HORIZ_BAND | */ CODEC_CAP_DR1 | CODEC_CAP_TRUNCATED | CODEC_CAP_DELAY,
      .max_lowres     = 3,
!     .pix_fmts       = ff_msmpeg_hwaccel_pixfmt_list_420,
  };
  
  AVCodec ff_msmpeg4v2_decoder = {
***************
*** 937,948 ****
      .init           = ff_msmpeg4_decode_init,
      .close          = ff_h263_decode_end,
      .decode         = ff_h263_decode_frame,
!     .capabilities   = CODEC_CAP_DRAW_HORIZ_BAND | CODEC_CAP_DR1,
      .max_lowres     = 3,
!     .pix_fmts       = (const enum AVPixelFormat[]) {
!         AV_PIX_FMT_YUV420P,
!         AV_PIX_FMT_NONE
!     },
  };
  
  AVCodec ff_msmpeg4v3_decoder = {
--- 946,954 ----
      .init           = ff_msmpeg4_decode_init,
      .close          = ff_h263_decode_end,
      .decode         = ff_h263_decode_frame,
!     .capabilities   = /* CODEC_CAP_DRAW_HORIZ_BAND | */ CODEC_CAP_DR1 | CODEC_CAP_TRUNCATED | CODEC_CAP_DELAY,
      .max_lowres     = 3,
!     .pix_fmts       = ff_msmpeg_hwaccel_pixfmt_list_420,
  };
  
  AVCodec ff_msmpeg4v3_decoder = {
***************
*** 954,965 ****
      .init           = ff_msmpeg4_decode_init,
      .close          = ff_h263_decode_end,
      .decode         = ff_h263_decode_frame,
!     .capabilities   = CODEC_CAP_DRAW_HORIZ_BAND | CODEC_CAP_DR1,
      .max_lowres     = 3,
!     .pix_fmts       = (const enum AVPixelFormat[]) {
!         AV_PIX_FMT_YUV420P,
!         AV_PIX_FMT_NONE
!     },
  };
  
  AVCodec ff_wmv1_decoder = {
--- 960,968 ----
      .init           = ff_msmpeg4_decode_init,
      .close          = ff_h263_decode_end,
      .decode         = ff_h263_decode_frame,
!     .capabilities   = /* CODEC_CAP_DRAW_HORIZ_BAND | */ CODEC_CAP_DR1 | CODEC_CAP_TRUNCATED | CODEC_CAP_DELAY,
      .max_lowres     = 3,
!     .pix_fmts       = ff_msmpeg_hwaccel_pixfmt_list_420,
  };
  
  AVCodec ff_wmv1_decoder = {
***************
*** 971,980 ****
      .init           = ff_msmpeg4_decode_init,
      .close          = ff_h263_decode_end,
      .decode         = ff_h263_decode_frame,
!     .capabilities   = CODEC_CAP_DRAW_HORIZ_BAND | CODEC_CAP_DR1,
      .max_lowres     = 3,
!     .pix_fmts       = (const enum AVPixelFormat[]) {
!         AV_PIX_FMT_YUV420P,
!         AV_PIX_FMT_NONE
!     },
  };
--- 974,1042 ----
      .init           = ff_msmpeg4_decode_init,
      .close          = ff_h263_decode_end,
      .decode         = ff_h263_decode_frame,
!     .capabilities   = /* CODEC_CAP_DRAW_HORIZ_BAND | */ CODEC_CAP_DR1 | CODEC_CAP_TRUNCATED | CODEC_CAP_DELAY,
!     .max_lowres     = 3,
!     .pix_fmts       = ff_msmpeg_hwaccel_pixfmt_list_420,
! };
! 
! #define CONFIG_MSMPEGV3_VDPAU_DECODER 1
! #if CONFIG_MSMPEGV3_VDPAU_DECODER
! static const AVOption msmpeg_options[] = {
!     {"quarter_sample", "1/4 subpel MC", offsetof(MpegEncContext, quarter_sample), FF_OPT_TYPE_INT, {.i64 = 0}, 0, 1, 0},
!     {"divx_packed", "divx style packed b frames", offsetof(MpegEncContext, divx_packed), FF_OPT_TYPE_INT, {.i64 = 0}, 0, 1, 0},
!     {NULL}
! };
! 
! static const AVClass msmpegv1_vdpau_class = {
!     "MSMPEG4 Video VDPAU Decoder",
!     av_default_item_name,
!     msmpeg_options,
!     LIBAVUTIL_VERSION_INT,
! };
!  
! AVCodec ff_msmpeg4v3_vdpau_decoder = {
!     .name           = "msmpeg4_vdpau",
!     .long_name      = NULL_IF_CONFIG_SMALL("MPEG-4 part 2 Microsoft variant version 3 (VDPAU)"),
!     .type           = AVMEDIA_TYPE_VIDEO,
!     .id             = AV_CODEC_ID_MSMPEG4V3,
!     .priv_data_size = sizeof(Mpeg4DecContext),
!     .init           = ff_msmpeg4_decode_init,
!     .close          = ff_h263_decode_end,
!     .decode         = ff_h263_decode_frame,
!     .capabilities   = CODEC_CAP_DR1 | CODEC_CAP_TRUNCATED | CODEC_CAP_HWACCEL_VDPAU,
!     .max_lowres     = 3,
!     .pix_fmts       = (const enum AVPixelFormat[]){ AV_PIX_FMT_VDPAU, AV_PIX_FMT_NONE },
!     .priv_class     = &msmpegv1_vdpau_class,
! };
! 
! AVCodec ff_msmpeg4v2_vdpau_decoder = {
!     .name           = "msmpeg4v2_vdpau",
!     .long_name      = NULL_IF_CONFIG_SMALL("MPEG-4 part 2 Microsoft variant version 2 (VDPAU)"),
!     .type           = AVMEDIA_TYPE_VIDEO,
!     .id             = AV_CODEC_ID_MSMPEG4V2,
!     .priv_data_size = sizeof(Mpeg4DecContext),
!     .init           = ff_msmpeg4_decode_init,
!     .close          = ff_h263_decode_end,
!     .decode         = ff_h263_decode_frame,
!     .capabilities   = CODEC_CAP_DR1 | CODEC_CAP_TRUNCATED | CODEC_CAP_HWACCEL_VDPAU,
      .max_lowres     = 3,
!     .pix_fmts       = (const enum AVPixelFormat[]){ AV_PIX_FMT_VDPAU, AV_PIX_FMT_NONE },
!     .priv_class     = &msmpegv1_vdpau_class,
  };
+ 
+ AVCodec ff_msmpeg4v1_vdpau_decoder = {
+     .name           = "msmpeg4v1_vdpau",
+     .long_name      = NULL_IF_CONFIG_SMALL("MPEG-4 part 2 Microsoft variant version 1 (VDPAU)"),
+     .type           = AVMEDIA_TYPE_VIDEO,
+     .id             = AV_CODEC_ID_MSMPEG4V1,
+     .priv_data_size = sizeof(Mpeg4DecContext),
+     .init           = ff_msmpeg4_decode_init,
+     .close          = ff_h263_decode_end,
+     .decode         = ff_h263_decode_frame,
+     .capabilities   = CODEC_CAP_DR1 | CODEC_CAP_TRUNCATED | CODEC_CAP_HWACCEL_VDPAU,
+     .max_lowres     = 3,
+     .pix_fmts       = (const enum AVPixelFormat[]){ AV_PIX_FMT_VDPAU, AV_PIX_FMT_NONE },
+     .priv_class     = &msmpegv1_vdpau_class,
+ };
+ 
+ #endif
diff -r -c FFmpeg-2.4.6-Helix/libavcodec/old_codec_ids.h ../ffmpeg-2.4.6-Helix/libavcodec/old_codec_ids.h
*** FFmpeg-2.4.6-Helix/libavcodec/old_codec_ids.h	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavcodec/old_codec_ids.h	2016-01-31 21:24:16.388443739 +0100
***************
*** 49,54 ****
--- 49,55 ----
      CODEC_ID_MSMPEG4V1,
      CODEC_ID_MSMPEG4V2,
      CODEC_ID_MSMPEG4V3,
+     CODEC_ID_MSMPEG4V4,
      CODEC_ID_WMV1,
      CODEC_ID_WMV2,
      CODEC_ID_H263P,
diff -r -c FFmpeg-2.4.6-Helix/libavcodec/utils.c ../ffmpeg-2.4.6-Helix/libavcodec/utils.c
*** FFmpeg-2.4.6-Helix/libavcodec/utils.c	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavcodec/utils.c	2016-02-02 22:53:59.725351423 +0100
***************
*** 1146,1153 ****
  
  enum AVPixelFormat avcodec_default_get_format(struct AVCodecContext *s, const enum AVPixelFormat *fmt)
  {
!     while (*fmt != AV_PIX_FMT_NONE && is_hwaccel_pix_fmt(*fmt))
!         ++fmt;
      return fmt[0];
  }
  
--- 1146,1153 ----
  
  enum AVPixelFormat avcodec_default_get_format(struct AVCodecContext *s, const enum AVPixelFormat *fmt)
  {
! //    while (*fmt != AV_PIX_FMT_NONE && is_hwaccel_pix_fmt(*fmt))
! //         ++fmt;
      return fmt[0];
  }
  
***************
*** 2293,2298 ****
--- 2293,2299 ----
              ret = avctx->codec->decode(avctx, picture, got_picture_ptr,
                                         &tmp);
              picture->pkt_dts = avpkt->dts;
+             //picture->pts = avpkt->pts;
  
              if(!avctx->has_b_frames){
                  av_frame_set_pkt_pos(picture, avpkt->pos);
diff -r -c FFmpeg-2.4.6-Helix/libavcodec/vc1dec.c ../ffmpeg-2.4.6-Helix/libavcodec/vc1dec.c
*** FFmpeg-2.4.6-Helix/libavcodec/vc1dec.c	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavcodec/vc1dec.c	2016-01-31 21:24:16.418442752 +0100
***************
*** 6318,6324 ****
      .close          = ff_vc1_decode_end,
      .decode         = vc1_decode_frame,
      .capabilities   = CODEC_CAP_DR1 | CODEC_CAP_DELAY | CODEC_CAP_HWACCEL_VDPAU,
!     .pix_fmts       = (const enum AVPixelFormat[]){ AV_PIX_FMT_VDPAU_WMV3, AV_PIX_FMT_NONE },
      .profiles       = NULL_IF_CONFIG_SMALL(profiles)
  };
  #endif
--- 6318,6324 ----
      .close          = ff_vc1_decode_end,
      .decode         = vc1_decode_frame,
      .capabilities   = CODEC_CAP_DR1 | CODEC_CAP_DELAY | CODEC_CAP_HWACCEL_VDPAU,
!     .pix_fmts       = (const enum AVPixelFormat[]){ AV_PIX_FMT_VDPAU, AV_PIX_FMT_NONE },
      .profiles       = NULL_IF_CONFIG_SMALL(profiles)
  };
  #endif
***************
*** 6334,6340 ****
      .close          = ff_vc1_decode_end,
      .decode         = vc1_decode_frame,
      .capabilities   = CODEC_CAP_DR1 | CODEC_CAP_DELAY | CODEC_CAP_HWACCEL_VDPAU,
!     .pix_fmts       = (const enum AVPixelFormat[]){ AV_PIX_FMT_VDPAU_VC1, AV_PIX_FMT_NONE },
      .profiles       = NULL_IF_CONFIG_SMALL(profiles)
  };
  #endif
--- 6334,6340 ----
      .close          = ff_vc1_decode_end,
      .decode         = vc1_decode_frame,
      .capabilities   = CODEC_CAP_DR1 | CODEC_CAP_DELAY | CODEC_CAP_HWACCEL_VDPAU,
!     .pix_fmts       = (const enum AVPixelFormat[]){ AV_PIX_FMT_VDPAU, AV_PIX_FMT_NONE },
      .profiles       = NULL_IF_CONFIG_SMALL(profiles)
  };
  #endif
diff -r -c FFmpeg-2.4.6-Helix/libavcodec/vdpau.c ../ffmpeg-2.4.6-Helix/libavcodec/vdpau.c
*** FFmpeg-2.4.6-Helix/libavcodec/vdpau.c	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavcodec/vdpau.c	2016-02-02 00:37:08.785433761 +0100
***************
*** 436,444 ****
--- 436,446 ----
  
      switch (s->pict_type) {
      case AV_PICTURE_TYPE_B:
+     case AV_PICTURE_TYPE_S:
          next = (struct vdpau_render_state *)s->next_picture.f->data[0];
          assert(next);
          render->info.mpeg4.backward_reference     = next->surface;
+         if( s->pict_type != AV_PICTURE_TYPE_S)
          render->info.mpeg4.vop_coding_type        = 2;
          // no break here, going to set forward prediction
      case AV_PICTURE_TYPE_P:
diff -r -c FFmpeg-2.4.6-Helix/libavcodec/vdpau.h ../ffmpeg-2.4.6-Helix/libavcodec/vdpau.h
*** FFmpeg-2.4.6-Helix/libavcodec/vdpau.h	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavcodec/vdpau.h	2016-01-31 21:24:16.428442423 +0100
***************
*** 101,106 ****
--- 101,107 ----
       * Set by the user.
       */
      VdpDecoderRender *render;
+     VdpDecoderSetControlData *set_video_header;
  
  #if FF_API_BUFS_VDPAU
      /**
diff -r -c FFmpeg-2.4.6-Helix/libavcodec/vdpau_internal.h ../ffmpeg-2.4.6-Helix/libavcodec/vdpau_internal.h
*** FFmpeg-2.4.6-Helix/libavcodec/vdpau_internal.h	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavcodec/vdpau_internal.h	2016-01-31 21:24:16.428442423 +0100
***************
*** 81,86 ****
--- 81,88 ----
  int ff_vdpau_common_start_frame(struct vdpau_picture_context *pic,
                                  const uint8_t *buffer, uint32_t size);
  int ff_vdpau_mpeg_end_frame(AVCodecContext *avctx);
+ int ff_vdpau_msmpeg_end_frame(AVCodecContext *avctx);
+ 
  int ff_vdpau_add_buffer(struct vdpau_picture_context *pic, const uint8_t *buf,
                          uint32_t buf_size);
  
diff -r -c FFmpeg-2.4.6-Helix/libavcodec/vdpau_mpeg4.c ../ffmpeg-2.4.6-Helix/libavcodec/vdpau_mpeg4.c
*** FFmpeg-2.4.6-Helix/libavcodec/vdpau_mpeg4.c	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavcodec/vdpau_mpeg4.c	2016-02-02 00:37:15.055248902 +0100
***************
*** 28,33 ****
--- 28,35 ----
  #include "vdpau.h"
  #include "vdpau_internal.h"
  
+ int vdpau_mpeg4_create_video_headers(AVCodecContext *avctx, uint32_t id, VdpDecoderControlData *data);
+ 
  static int vdpau_mpeg4_start_frame(AVCodecContext *avctx,
                                     const uint8_t *buffer, uint32_t size)
  {
***************
*** 46,54 ****
--- 48,58 ----
  
      switch (s->pict_type) {
      case AV_PICTURE_TYPE_B:
+     case AV_PICTURE_TYPE_S:
          ref = ff_vdpau_get_surface_id(s->next_picture.f);
          assert(ref != VDP_INVALID_HANDLE);
          info->backward_reference = ref;
+         if( s->pict_type != AV_PICTURE_TYPE_S)
          info->vop_coding_type    = 2;
          /* fall-through */
      case AV_PICTURE_TYPE_P:
***************
*** 88,93 ****
--- 92,156 ----
       return 0;
  }
  
+ int vdpau_mpeg4_create_video_headers(AVCodecContext *avctx, uint32_t id, VdpDecoderControlData *data)
+ {
+    Mpeg4DecContext * const s = avctx->priv_data;
+    memset(data, 0x0, sizeof(*data));
+     
+    if(id == VDP_MPEG4_VOL_HEADER) 
+    {
+       VdpDecoderMpeg4VolHeader *vol = &(data->mpeg4VolHdr);
+         
+       vol->struct_version               = VDP_MPEG4_STRUCT_VERSION;
+       vol->video_object_type_indication = s->m.vo_type;
+       vol->aspect_ratio_info            = s->m.aspect_ratio_info;
+       vol->par_width                    = s->m.avctx->sample_aspect_ratio.num;
+       vol->par_height                   = s->m.avctx->sample_aspect_ratio.den;
+       vol->vol_control_parameters       = s->vol_control_parameters;
+       vol->low_delay                    = s->m.low_delay;
+       vol->video_object_layer_shape     = s->shape;
+       vol->vop_time_increment_resolution = s->m.avctx->time_base.den;
+       vol->video_object_layer_width     = s->m.width;
+       vol->video_object_layer_height    = s->m.height;
+       vol->interlaced                   = s->m.progressive_frame ^ 1;
+       vol->sprite_enable                = s->vol_sprite_usage;
+       vol->no_of_sprite_warping_points  = s->num_sprite_warping_points;
+       vol->sprite_warping_accuracy      = s->m.sprite_warping_accuracy;
+       vol->sprite_brightness_change     = s->sprite_brightness_change;
+       vol->quant_precision              = s->m.quant_precision;
+       vol->quant_type                   = s->m.mpeg_quant;
+       for(int i=0; i < 64; ++i)
+       {
+             //to be done matrices
+       }
+       vol->quarter_sample               = s->m.quarter_sample;
+       vol->resync_marker_disable        = s->resync_marker;
+       vol->data_partitioned             = s->m.data_partitioning;
+       vol->reversible_vlc               = s->rvlc;
+       vol->newpred_enable               = s->new_pred;
+       vol->scalability                  = s->scalability;
+       vol->enhancement_type             = s->enhancement_type;
+ 
+       return 1;
+    }
+    return 0;
+ }
+ 
+ static int vdpau_mpeg4_set_video_header (AVCodecContext *avctx, uint32_t id)
+ {
+     AVVDPAUContext *hwctx = avctx->hwaccel_context;
+     VdpDecoderControlData data;
+ 
+     if(!hwctx->set_video_header)
+        return 0;
+ 
+     if(vdpau_mpeg4_create_video_headers(avctx, id, &data))
+        return hwctx->set_video_header(hwctx->decoder, id, &data);
+ 
+     return 0;
+ }
+ 
+ 
  #if CONFIG_H263_VDPAU_HWACCEL
  AVHWAccel ff_h263_vdpau_hwaccel = {
      .name           = "h263_vdpau",
***************
*** 97,102 ****
--- 160,166 ----
      .start_frame    = vdpau_mpeg4_start_frame,
      .end_frame      = ff_vdpau_mpeg_end_frame,
      .decode_slice   = vdpau_mpeg4_decode_slice,
+ //    .set_video_header = vdpau_mpeg4_set_video_header
      .frame_priv_data_size = sizeof(struct vdpau_picture_context),
  };
  #endif
***************
*** 110,115 ****
--- 174,180 ----
      .start_frame    = vdpau_mpeg4_start_frame,
      .end_frame      = ff_vdpau_mpeg_end_frame,
      .decode_slice   = vdpau_mpeg4_decode_slice,
+ //    .set_video_header = vdpau_mpeg4_set_video_header
      .frame_priv_data_size = sizeof(struct vdpau_picture_context),
  };
  #endif
diff -r -c FFmpeg-2.4.6-Helix/libavfilter/libmpcodecs/img_format.c ../ffmpeg-2.4.6-Helix/libavfilter/libmpcodecs/img_format.c
*** FFmpeg-2.4.6-Helix/libavfilter/libmpcodecs/img_format.c	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavfilter/libmpcodecs/img_format.c	2016-01-31 21:24:16.448441765 +0100
***************
*** 140,145 ****
--- 140,149 ----
      case IMGFMT_VDPAU_MPEG4:     return "MPEG-4 Part 2 VDPAU acceleration";
      case IMGFMT_VDPAU_WMV3:      return "WMV3 VDPAU acceleration";
      case IMGFMT_VDPAU_VC1:       return "VC1 VDPAU acceleration";
+     case IMGFMT_VDPAU_MSMPEG4V1: return "MS MPEG-4 V1 VDPAU acceleration";
+     case IMGFMT_VDPAU_MSMPEG4V2: return "MS MPEG-4 V2 VDPAU acceleration";
+     case IMGFMT_VDPAU_MSMPEG4V3: return "MS MPEG-4 V3 VDPAU acceleration";
+     case IMGFMT_VDPAU_MSMPEG4V4: return "MS MPEG-4 V4 VDPAU acceleration";
      }
      snprintf(unknown_format,20,"Unknown 0x%04x",format);
      return unknown_format;
diff -r -c FFmpeg-2.4.6-Helix/libavfilter/libmpcodecs/img_format.h ../ffmpeg-2.4.6-Helix/libavfilter/libmpcodecs/img_format.h
*** FFmpeg-2.4.6-Helix/libavfilter/libmpcodecs/img_format.h	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavfilter/libmpcodecs/img_format.h	2016-01-31 21:24:16.448441765 +0100
***************
*** 286,291 ****
--- 286,295 ----
  #define IMGFMT_VDPAU_WMV3          (IMGFMT_VDPAU|0x04)
  #define IMGFMT_VDPAU_VC1           (IMGFMT_VDPAU|0x05)
  #define IMGFMT_VDPAU_MPEG4         (IMGFMT_VDPAU|0x06)
+ #define IMGFMT_VDPAU_MSMPEG4V1     (IMGFMT_VDPAU|0x07)
+ #define IMGFMT_VDPAU_MSMPEG4V2     (IMGFMT_VDPAU|0x08)
+ #define IMGFMT_VDPAU_MSMPEG4V3     (IMGFMT_VDPAU|0x09)
+ #define IMGFMT_VDPAU_MSMPEG4V4     (IMGFMT_VDPAU|0x0A)
  
  #define IMGFMT_IS_HWACCEL(fmt) (IMGFMT_IS_VDPAU(fmt) || IMGFMT_IS_XVMC(fmt))
  
diff -r -c FFmpeg-2.4.6-Helix/libavfilter/libmpcodecs/libvo/video_out.h ../ffmpeg-2.4.6-Helix/libavfilter/libmpcodecs/libvo/video_out.h
*** FFmpeg-2.4.6-Helix/libavfilter/libmpcodecs/libvo/video_out.h	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavfilter/libmpcodecs/libvo/video_out.h	2016-01-31 21:24:16.458441436 +0100
***************
*** 101,106 ****
--- 101,114 ----
    int w,h;
  } mp_win_t;
  
+ #if 0
+ #define VOCTRL_SET_VIDEO_HEADER 40
+ typedef struct {
+    int id;
+    void *data;
+ } mp_video_header_t;
+ #endif
+ 
  #define VO_TRUE      1
  #define VO_FALSE     0
  #define VO_ERROR    -1
diff -r -c FFmpeg-2.4.6-Helix/libavfilter/vf_mp.c ../ffmpeg-2.4.6-Helix/libavfilter/vf_mp.c
*** FFmpeg-2.4.6-Helix/libavfilter/vf_mp.c	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavfilter/vf_mp.c	2016-01-31 21:24:16.458441436 +0100
***************
*** 122,127 ****
--- 122,131 ----
      {IMGFMT_VDPAU_WMV3,      AV_PIX_FMT_VDPAU_WMV3},
      {IMGFMT_VDPAU_VC1,       AV_PIX_FMT_VDPAU_VC1},
      {IMGFMT_VDPAU_MPEG4,     AV_PIX_FMT_VDPAU_MPEG4},
+     {IMGFMT_VDPAU_MSMPEG4V1, AV_PIX_FMT_VDPAU_MSMPEG4V1},
+     {IMGFMT_VDPAU_MSMPEG4V2, AV_PIX_FMT_VDPAU_MSMPEG4V2},
+     {IMGFMT_VDPAU_MSMPEG4V3, AV_PIX_FMT_VDPAU_MSMPEG4V3},
+     {IMGFMT_VDPAU_MSMPEG4V4, AV_PIX_FMT_VDPAU_MSMPEG4V4},
      {0, AV_PIX_FMT_NONE}
  };
  
diff -r -c FFmpeg-2.4.6-Helix/libavformat/mov.c ../ffmpeg-2.4.6-Helix/libavformat/mov.c
*** FFmpeg-2.4.6-Helix/libavformat/mov.c	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavformat/mov.c	2016-01-31 21:24:16.468441107 +0100
***************
*** 2488,2493 ****
--- 2488,2494 ----
              return ret;
      }
  
+ #if 0
      switch (st->codec->codec_id) {
  #if CONFIG_H261_DECODER
      case AV_CODEC_ID_H261:
***************
*** 2502,2507 ****
--- 2503,2509 ----
          st->codec->height= 0;
          break;
      }
+ #endif
  
      /* Do not need those anymore. */
      av_freep(&sc->chunk_offsets);
diff -r -c FFmpeg-2.4.6-Helix/libavutil/arm/intmath.h ../ffmpeg-2.4.6-Helix/libavutil/arm/intmath.h
*** FFmpeg-2.4.6-Helix/libavutil/arm/intmath.h	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavutil/arm/intmath.h	2016-01-31 21:24:16.468441107 +0100
***************
*** 61,67 ****
      __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
      return x;
  }
! 
  #define av_clip_uintp2 av_clip_uintp2_arm
  static av_always_inline av_const unsigned av_clip_uintp2_arm(int a, int p)
  {
--- 61,67 ----
      __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
      return x;
  }
! /*
  #define av_clip_uintp2 av_clip_uintp2_arm
  static av_always_inline av_const unsigned av_clip_uintp2_arm(int a, int p)
  {
***************
*** 69,74 ****
--- 69,75 ----
      __asm__ ("usat %0, %2, %1" : "=r"(x) : "r"(a), "i"(p));
      return x;
  }
+ */
  
  #define av_sat_add32 av_sat_add32_arm
  static av_always_inline int av_sat_add32_arm(int a, int b)
diff -r -c FFmpeg-2.4.6-Helix/libavutil/pixdesc.c ../ffmpeg-2.4.6-Helix/libavutil/pixdesc.c
*** FFmpeg-2.4.6-Helix/libavutil/pixdesc.c	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavutil/pixdesc.c	2016-01-31 21:24:16.478440778 +0100
***************
*** 915,920 ****
--- 915,944 ----
          .log2_chroma_h = 1,
          .flags = AV_PIX_FMT_FLAG_HWACCEL,
      },
+     [AV_PIX_FMT_VDPAU_MSMPEG4V1] = {
+         .name = "vdpau_msmpegv1",
+         .log2_chroma_w = 1,
+         .log2_chroma_h = 1,
+         .flags = AV_PIX_FMT_FLAG_HWACCEL,
+     },
+     [AV_PIX_FMT_VDPAU_MSMPEG4V2] = {
+         .name = "vdpau_msmpegv2",
+         .log2_chroma_w = 1,
+         .log2_chroma_h = 1,
+         .flags = AV_PIX_FMT_FLAG_HWACCEL,
+     },
+     [AV_PIX_FMT_VDPAU_MSMPEG4V3] = {
+         .name = "vdpau_msmpegv3",
+         .log2_chroma_w = 1,
+         .log2_chroma_h = 1,
+         .flags = AV_PIX_FMT_FLAG_HWACCEL,
+     },
+     [AV_PIX_FMT_VDPAU_MSMPEG4V4] = {
+         .name = "vdpau_msmpegv4",
+         .log2_chroma_w = 1,
+         .log2_chroma_h = 1,
+         .flags = AV_PIX_FMT_FLAG_HWACCEL,
+     },
  #endif
      [AV_PIX_FMT_RGB48BE] = {
          .name = "rgb48be",
diff -r -c FFmpeg-2.4.6-Helix/libavutil/pixfmt.h ../ffmpeg-2.4.6-Helix/libavutil/pixfmt.h
*** FFmpeg-2.4.6-Helix/libavutil/pixfmt.h	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavutil/pixfmt.h	2016-01-31 21:24:16.488440449 +0100
***************
*** 112,117 ****
--- 112,121 ----
      AV_PIX_FMT_VDPAU_MPEG2,///< MPEG-2 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers
      AV_PIX_FMT_VDPAU_WMV3,///< WMV3 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers
      AV_PIX_FMT_VDPAU_VC1, ///< VC-1 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers
+     AV_PIX_FMT_VDPAU_MSMPEG4V1,
+     AV_PIX_FMT_VDPAU_MSMPEG4V2,
+     AV_PIX_FMT_VDPAU_MSMPEG4V3,
+     AV_PIX_FMT_VDPAU_MSMPEG4V4,
  #endif
      AV_PIX_FMT_RGB48BE,   ///< packed RGB 16:16:16, 48bpp, 16R, 16G, 16B, the 2-byte value for each R/G/B component is stored as big-endian
      AV_PIX_FMT_RGB48LE,   ///< packed RGB 16:16:16, 48bpp, 16R, 16G, 16B, the 2-byte value for each R/G/B component is stored as little-endian
diff -r -c FFmpeg-2.4.6-Helix/libavutil/utils.c ../ffmpeg-2.4.6-Helix/libavutil/utils.c
*** FFmpeg-2.4.6-Helix/libavutil/utils.c	2015-01-17 19:09:02.000000000 +0100
--- ../ffmpeg-2.4.6-Helix/libavutil/utils.c	2016-01-31 21:24:16.488440449 +0100
***************
*** 36,42 ****
      if (checks_done)
          return LIBAVUTIL_VERSION_INT;
  
!     av_assert0(AV_PIX_FMT_VDA_VLD == 81); //check if the pix fmt enum has not had anything inserted or removed by mistake
      av_assert0(AV_SAMPLE_FMT_DBLP == 9);
      av_assert0(AVMEDIA_TYPE_ATTACHMENT == 4);
      av_assert0(AV_PICTURE_TYPE_BI == 7);
--- 36,42 ----
      if (checks_done)
          return LIBAVUTIL_VERSION_INT;
  
!     //av_assert0(AV_PIX_FMT_VDA_VLD == 81); //check if the pix fmt enum has not had anything inserted or removed by mistake
      av_assert0(AV_SAMPLE_FMT_DBLP == 9);
      av_assert0(AVMEDIA_TYPE_ATTACHMENT == 4);
      av_assert0(AV_PICTURE_TYPE_BI == 7);

